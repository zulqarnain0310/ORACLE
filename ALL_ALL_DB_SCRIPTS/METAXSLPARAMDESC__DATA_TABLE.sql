REM INSERTING into SYS.METAXSLPARAMDESC$
SET DEFINE OFF;
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','ALTER_INDEX_PART_UNUSABLE',1,'Force ALTER statement when there is an unusable index partition in DDL transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','BASE_PARTITION_NAME',1,'Base partition for index partition selected for the transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','BASE_SUBPARTITION_NAME',1,'Base subpartition for index subpartition selected for the transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','BODY',0,'Include type or package body in DDL');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CM_MODE',1,'Generate syntax for Oracle Change Manager');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONNECT_PROCEDURE',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONSTRAINTS',0,'Include nonreferential table constraints in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONSTRAINTS_AS_ALTER',0,'Include table constraints as separate ALTER TABLE statements');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONVERT_TSTZ_COLS',1,'Use ORA_DST_CONVERT(SYS_ET_BLOB_TO_IMAGE()) when importing VARRAY BLOB columns with external tables');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CURRENT_SCHEMA',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DATA_LAYER_NOT_NETWORK',1,'SXML transform from data layer -- datapump non-network mode');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DATAOBJ_NUM',1,'dataobj# of (sub)partition to fetch over db link -- datapump network mode');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DBA',1,'If TRUE, use privileged interface');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DBLINK',1,'** UNSUPPORTED ** -- originally for logical standby');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DISABLE_ARCHIVE_LOGGING',1,'Generate ALTER TABLE NOLOGGING');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DML_ERROR_LOGGING_CLAUSE',1,'DML error logging clause for external table import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DPAPIVERSION',1,'Direct path API version in stream metadata');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DROP',1,'Drop external table at end of operation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DUMMY',1,'Dummy parameter for transforms with no real parameters');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EMIT_SCHEMA',1,'Include schema when referencing schema objects');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','ENCRYPTION_PASSWORD',1,'Password to use for external table (un)load of encrypted column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXPORT',1,'Emit datapump-specific syntax');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXT_TABLE_CLAUSE',1,'Text to emit following ORGANIZATION EXTERNAL');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXT_TABLE_NAME',1,'Name of external table (defaults to ET$ + obj#)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXT_TABLE_SCHEMA',1,'Schema of external table');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXT_TABLE_SPLIT_VERB',1,'Split generated SQL statments into multiple verb pieces');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE',0,'Use the FORCE keyword');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE_LOB_BE',1,'Make lob in stream metadata appear big-endian');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE_NO_ENCRYPT',1,'Clear encryption bits in column property in stream metadata');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE_UNIQUE',1,'Generate unique names for nested tables when remapping table name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE_VIRTUAL_COLUMNS',1,'Force generation of virtual column definitions in datapump operation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','FORCE_INDEX',1,'Force generation of index irrespective of its creation by constraint
   or normal');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','GEN_BEAN',1,'Value of genbean parameter in call to dbms_xmlschema.registerSchema');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','GEN_TABLES',1,'Value of gentables parameter in call to dbms_xmlschema.registerSchema');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','GEN_TYPES',1,'Value of gentypes parameter in call to dbms_xmlschema.registerSchema');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','HIDDEN_COLUMNS',1,'Create unique name for nested table setid column (instead of system generated name) -- used by datapump data layer');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','IND_SPARE4',1,'Specify a new value for the PARAMETERS clause in an INDEX_T XML document (the parameters are stored in ind$.spare4)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INDEX_BY_NAME',1,'When adding primary/unique constraint specify index name in USING INDEX');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INDEX_COMPRESSION_CLAUSE',0,'Text of user-specified index compression clause');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INMEMORY',1,'Generate INMEMORY clause for in-memory columnar support');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INMEMORY_CLAUSE',1,'Text of INMEMORY clause for in-memory columnar support');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INSERT',1,'** UNSUPPORTED ** -- originally for logical standby');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INSERTNULLS',1,'Build an insert statement whose VALUES clause contains all NULL values - used by kupd$data.fetch_insert_stmt');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','IN_TSNUM',1,'Value of TRANSPORTABLE for views as tables');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LINESIZE',1,'Control length at which lines are truncated and wrapped to the next line');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LOB_SEGNAME',1,'Emit lob segment name as part of lob description');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LOB_STORAGE',0,'Storage keyword for LOB columns: SECUREFILE, BASICFILE, DEFAULT (suppress keyword and take default), NO_CHANGE (use value in XML document)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LOCK_STATS',1,'Call DBMS_STATS.LOCK_TABLE_STATS if table stats were previously locked');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LRG',1,'Generate syntax needed for regression tests');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','MATERIALIZED_ZONEMAP',0,'Include MATERIALIZED ZONEMAP clause in DDL transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','INCLUDE_PARTITIONS',0,'Include generated interval and list partitions in DDL transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','NETWORK_LINK',1,'DB link when loading table from network');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','NETWORK_NAME',1,'Remote table name when loading table from network');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','NETWORK_SCHEMA',1,'Schema of remote table when loading table from network');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','NULL_CONSTRAINTS',1,'Emit NULL constraint');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OBJECT_ROW',1,'Copy only this specify row to the output doc');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OID',0,'Include OID clause in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OLDEXPORT',1,'Generate SQL for original export');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OMIT_COL_DATATYPE',1,'Omit the column datatype when generating a CREATE TABLE ddl');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','ONLINE_REDEF',1,'For PK/UK constraint omit the CREATE UNIQUE INDEX syntax (this param  used by online redefinition)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OPERATION_TYPE',1,'Type of DDL operation: CREATE (create an internal database table), EXPORT (unload data for export using external tables), IMPORT (load data for import using external tables), IMPORT_CONVENTIONAL (load data for import with conventional path load), NETWORK (load data from remote database for import)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OVERRIDE_CHARLENGTH',1,'Maximum width (in bytes) of character in OVERRIDE_CHARSET');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OVERRIDE_CHARSET',1,'Character set ID for all character/clob columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OVERRIDE_CHARSETNAME',1,'Character set name for all character/clob columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OVERRIDE_NCHARSET',1,'Character set ID for all national character/clob columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OVERRIDE_NCHARSETNAME',1,'Character set name for all national character/clob columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARALLEL',1,'User-specified PARALLEL value');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARALLEL_HINT',1,'Value of PARALLEL hint in INSERT statement');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARSE_ALTER',1,'Internal: used by diff/alter to detect columns that are not alterable because referenced within a virtual column or functional index expression');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARSE_EXPRESSIONS',0,'Get parsed SXML for view query, functional index expression or check constraint condition');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARTITIONING',0,'Include partitioning clauses in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARTITIONS_BY_QUANTITY',0,'Generate hash partitioning by quantity syntax');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PARTITION_NAME',0,'Name of partition selected for the transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PCTSPACE',0,'Percentage by which space allocation is to be modified');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PHYSICAL_PROPERTIES',0,'Include physical properties in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRESERVE_LOCAL',0,'Preserve the LOCAL keyword for locally partitioned indexes when PARTITIONING is set false');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRESERVE_TYPE_EVOLUTION',1,'Break up the ALTER TYPE subclauses of the CREATE TYPE source lines into separately executable commands');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRETTY',0,'Format the output with indentation and line feeds');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ALTERABLE',2,'Reason why difference cannot be altered');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ALT_CONNECT_TYPE',9,'Connect required for operation: HARD, SOFT or NONE (datapump only)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ANC_OBJECT_NAME',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ANC_OBJECT_SCHEMA',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ANC_OBJECT_TYPE',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BASE_IND_FLAGS',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BASE_IND_PROPERTY',5,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BASE_OBJECT_NAME',12,'Name of the base object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BASE_OBJECT_SCHEMA',12,'Schema of the base object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BASE_OBJECT_TYPE',12,'Object type of the base object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BIND_PATTERN',9,'(internal) Bind variables must be passed in. This is a private handshake between the worker and the mdapi');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BITMAPPED',5,'Unit size of bitmapped tablespace in blocks');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_BYTES_ALLOCATED',5,'Total number of bytes allocated for table or (sub)partition');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_CLAUSE_TYPE',2,'Type of modification clause, e.g., ADD_PARTITION');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_COLUMN_ATTRIBUTE',2,'Column attribute being modified, e.g., CACHE');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_CONSTRAINT_STATE',2,'Constraint state');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_CONSTRAINT_TYPE',2,'Constraint type: PRIMARY, FOREIGN, UNIQUE, CHECK, SCOPE');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_CREATION_TIME',5,'obj$.ctime');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DATAOBJ_NUM',5,'dataobj# of table or (sub)partition');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DBLAPWX',9,'Value of AUTHPWDX for data base link');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DBLPWX',9,'Value of PASSWORDX for data base link');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DBLFLG',5,'Value of FLAG for data base link');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DDL',1,'(internal) DDL generated for object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DELIM',1,'(internal) character string used to delimit parse item names and values');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DEPOBJNUM',5,'(internal) obj# of object this object is dependent on');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DROPCOLCOUNT',9,'Count of columns in dumpfile table not present in preexisting table');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_DROPCOLNAME',9,'Names of columns in dumpfile table not present in preexisting table');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ENABLE',12,'ENABLE if the trigger is enabled; DISABLE otherwise');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ET_PARALLEL',5,'1 = can do ET parallel unload; 0 = cannot');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_FLAGS',5,'ts$.flags');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_GRANTEE',12,'The grantee, if any');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_GRANTOR',12,'The grantor, if any');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAKAN',5,'tab$.spare1 - used to store hakan_kqldtvc');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_FGAC',5,'non-0 = FGAC enabled');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_LONG_COL',5,'Y = table has long or long raw column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_NFT_VARRAY',5,'Y = table has varray with embedded non final type');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_NONSCOPED_REF',5,'Y = table has non-scoped ref column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_TSTZ_COLS',13,'Y = table has data of type DTYSTZ "TIMESTAMP WITH TIME ZONE"');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_VIRTUAL_COLUMNS',9,'String of Y = table has virtual columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HAS_XMLSCHEMA_COLS',5,'Y = table has xmlschema-based columns');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_READ_ONLY',5,'Y = table data is read only');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_HIERARCY_ENABLE',5,'Y = table is xml hierarchy enabled');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_CREATED_BY_CONSTRAINT',9,'String of Y = Index created by constraint');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_IND_FLAGS',5,'ind$.flags');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_IND_SPARE4',1,'ind$.spare4 - this is where the PARAMETERS clause for an XML index is stored');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LAST_DDL_TIME',5,'obj$.mtime');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LEVEL',5,'exppkgact$.level#');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LOCAL',5,'flags: 0x01 = local, 0x02 = stored as binary (from dba_xml_schemas)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LONGNAME',4,'Object longname if it exists, otherwise object name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LONG_POSITION',9,'Position of long column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_MARKER',5,'Marker type');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_NAME',14,'Object name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_NESTED_COLUMNS',5,'Y = has tested-TABLE columns, N = does not');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_NESTED_TAB_NAME',5,'Nested table name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_NO_TABLE_LOCK',9,'Y = table lock is disabled');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_READ_ONLY_TABLE',9,'Y = table is read only');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_OBJECT_TYPE',12,'Object type');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_OBJNUM',5,'obj# of object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_OBJNUM_NAME',5,'T = base table, N = nested table, X = nested table belonging to XMLtype');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_OPTION_TAG',5,'Unique tag for the option (from ku$_option_objnum_view)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PARENT_OBJECT_NAME',5,'Name of parent object (if refpar child)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PARENT_OBJECT_SCHEMA',5,'Schema of parent object (if refpar child)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PARTITION_NAME',5,'Partition name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PARTITION_TYPE',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PARTTYPE',5,'partobj$.parttype: 1 = range, 2 = hash, 3 = system 4 = List, 5 = Ref');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PKG_NAME',5,'exppkgact$.package');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PKG_SCHEMA',5,'exppkgact$.schema');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PROPERTY',5,'tab$.property or ind$.property');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PROPERTY3',5,'tab$.property/power(2, 64)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_OBJ_FLAGS',5,'obj$.flags');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PROXY_SCHEMA',5,'for downgrade export of import procedural object, schema of view to query');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_PROXY_VIEW',5,'for downgrade export of import procedural object, name of view to query');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_REFPAR_LEVEL',5,'Reference partition level');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ROW',9,'1-based row number of object in XML document');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_ROW_LEVEL_SECURITY',5,'Y = table has row-level security policy; N = does not');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SCHEMA',12,'Object schema, if any');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SCHEMAOID',5,'Schema OID of XML schema');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SCHEMA_LEVEL',5,'Depth of dependence on other xml schemas');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SECONDARY',5,'Y = secondary object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SEQ_IN_DEFAULT',5,'non-null = table has column with default expression containing a sequence');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SQLVALID',9,'1 = valid SQL statement can be generated; 100 = stream version not valid; 101 = no columns match between source and target tables');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_SYSTEM_GENERATED',12,'Y = system-generated object; N = not system-generated');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TABLESPACE',12,'Object tablespace (default tablespace for partitioned objects)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TABLE_NAME',5,'Table name');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TEMPLATE_TABLE',9,'Name of the template table for a view-as-table');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TRIGFLAG',5,'tab$.trigflag');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TS_NUM',5,'ts# for pluggable tablespace');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TYPE',5,'Type of table_data object: TABLE, PARTITION, SUBPARTITION, NESTED TABLE, NESTED PARTITION');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TYPE_ALTER_TYPE_CNT',9,'Number of ALTER TYPE subclauses in the CREATE TYPE');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_LENGTH_SEMANTICS',9,'String length semantics of the object');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_TYPE_NUM',5,'ind$.type#: 1 = normal, 2 = bitmap, 3 = cluster, 4 = iot-top, 5 = iot - nested, 6 = secondary, 7 = ansi, 8 = lob, 9 = domain');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_UNLOAD_METHOD',5,'unload method: 1 = prefer_direct, 4 = require_external');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_UNPACKEDCOL_COUNT',9,'Number of columns belonging to an unpacked AnyData type column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_UNPACKEDCOL_LIST',9,'Source and targer names of columns belonging to an unpacked AnyData type column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_UNSUPPORTED_OBJECT',5,'1 = index has no columns; not supported');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_VERB',8,'SQL verb');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_XMLTYPE_FMTS',5,'formats of XMLType columns: 0x01=CLOB; 0x02=BLOB');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_XPATH',2,'XPath of element in SXML diff document');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','QUERY',1,'Query to use in external table or network query');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','QUERY_ORDER_BY',1,'ORDER BY-clause in Query to use in external table or network query');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','QUERY_WHERE',1,'WHERE-clause in Query to use in external table or network query');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REF_CONSTRAINTS',0,'Include referential (foreign key) constraints in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REGEN_DEFN',0,'TRUE = regenerate type definition from dictionary metadata');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_COLUMN_NAME',1,'Used for REMAP_DATA: insert REMAP_COLUMN_NAME element');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_COLUMN_NAME_SCHEMA',1,'Schema of table whose column is to be remapped (editioning views)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_COLUMN_NAME_TABLE',1,'Name of table whose column is to be remapped (editioning views)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_CONSTRAINT_NAME',1,'Remap constraint name (in table) from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_DATAFILE',0,'Remap datafile names from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_DIRECTORY',0,'Remap datafile paths from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_IND_TABLESPACE',1,'Remap IND/TS_NAME');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_LOB_TABLESPACE',1,'Remap PLOBMD_DEFTS_NAME');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_NAME',0,'Remap object names from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_PART_TABLESPACE',1,'Remap PARTOBJ/DEFTS_NAME');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_SCHEMA',0,'Remap schema names, grantee names, and user names from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_SPART_TABLESPACE',1,'Remap COMPART_LIST_ITEM/DEFTS_NAME');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_TABLESPACE',0,'Remap tablespace names from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_TABLE_TABLESPACE',1,'Remap TABLE/TS_NAME');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_TRG_SCHEMA',1,'TRUE = REMAP_SCHEMA specified; use new schema in trigger definition');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REMAP_TYPE_NAME',1,'Remap TYPE_NAME from old to new');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','RESET_PARALLEL',1,'Generate ALTER INDEX to reset PARALLEL to value in XML document');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','RESTORE_ARCHIVE_LOGGING',1,'Generate ALTER TABLE to restore logging to original state');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REUSE',0,'Include REUSE parameter for tablespace datafiles');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','REVOKE_FROM',0,'User from whom role must be revoked');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SAMPLE',1,'SAMPLE value to use when fetching data for external table or remote operation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SCN',1,'SCN to use in AS OF SCN clause in external table or remote operation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SEGMENT_ATTRIBUTES',0,'Include segment attribute clauses (physical attributes, storage attributes, tablespace, logging) in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SHARING_CLAUSE',0,'Sharing clause for common objects, keywords NONE, METADATA, DATA, EXTENDED_DATA, NO_SHARING');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DWCS_CVT_IOTS',0,'Convert IOT tables to Heap tables');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','DWCS_CVT_CONSTRAINTS',0,'Disable constraints for Data Warehouse Cloud Services');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONSTRAINT_USE_DEFAULT_INDEX',0,'Allow creating indexes for Data Warehouse Cloud Services');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CONSTRAINT_NAME_FROM_INDEX',0,'Use the index name for the constraint name Data Warehouse Cloud Services');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OMIT_ENCRYPTION_CLAUSE',0,'Suppress encryption attributes');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','CON_TYPE',1,'Container type being imported');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SEGMENT_CREATION',1,'Generate SEGMENT CREATION syntax');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SIZE_BYTE_KEYWORD',0,'Include the BYTE keyword as part of the size specification for CHAR and VARCHAR2 columns that use byte semantics');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SOURCE_VERSION',1,'Source database version');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SPECIFICATION',0,'Include type or package specification in DDL');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SQLFILE',1,'** UNSUPPORTED **');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SQLTERMINATOR',0,'Append a SQL terminator to each SQL statement');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','START_WITH',1,'Value of START WITH');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','STAT_SCHEMA',1,'Schema for table for table stats');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','STAT_TABLE',1,'Name of table for table stats');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','STORAGE',0,'Include storage clauses in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','STREAMD_VERSION',1,'Stream metadata version (used by data layer)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SUBPARTITION_NAME',0,'Name of subpartition selected for the transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TABLESPACE',0,'Include tablespace clauses in transformation');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TABLE_COMPRESSION',1,'Include table compression clause');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TABLE_COMPRESSION_CLAUSE',0,'Value of table compression clause or NONE');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TARGET_TABLE_NAME',1,'Name of target table for external table import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TARGET_TABLE_SCHEMA',1,'Schema of target table for external table import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TO_LOGICAL',1,'1 = convert column references from physical to logical; 0 = convert from logical to physical');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TRANSPORTABLE',1,'Generate syntax for transportable import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TRANSPORTABLE_CLASSIC',1,'Generate transportable syntax for original exp/imp');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','UNIQUE_NAME',1,'Unique identifier for datapump job - to generate unique object names');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','EXCHANGE_OUT',1,'Tranform is being done for EXCHANGE_OUT operatioon');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','SHARD_TABLESPACE',1,'Tablespace for sharding exchange');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','UPGRADE_V10_XMLTYPE',1,'Dumpfile with V10.x xmlstype column fix: generate appropriate syntax');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','USE_DML_APPEND_HINT',1,' Use APPEND hint in external table INSERT statements for import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','USE_DATA_VALIDATE_HINT',1,' Use DATA_VALIDATE hint in external table SELECT statements for import');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','USING_INDEX',0,'Include USING INDEX clause');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','VERSION',0,'Version for which the output is generated');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','VIEW_AS_TABLE',1,'Insert VIEW_AS_TABLE element in document');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','VC_WITHOUT_TYPE',1,'When this is set to true, datatype clause is not generated for virtual column');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','WILL_MAKE_TBS_RW',1,'Use undocumented TSTZ syntax in CREATE TABLE statement (worker will fix up later)');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','WITH_FUNCTION',1,'With function used on create table for sharded table loading');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','WITH_FUNCTION_QUERY',1,'Query referencing the "with function" for sharded table loading');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','XMLTYPE_STREAM_FORMAT',1,'Format of XMLType columns in stream, either CLOB or BLOB');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','OMIT_AQ_CLAUSE',1,'Remove QUEUE_TABLE designation on table redefinitions ');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','STATISTICS',1,'ChangeManager specific transform parameters - not used by Data Pump');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','XMLXVM_TRANSFORM_ENGINE',1,'Use XmlXvm transformation engine when set to TRUE');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','COLLATION_CLAUSE',0,'Keyword values ALWAYS and NEVER control when a collation clause is included in DDL');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','TEN_G_LOGON_ALLOWED',1,'Allow 10g style verifiers');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','PRS_USER_DISABLED',9,'Returns ''USER_DISABLED=1'' if the generated DDL was modified to create the user as LOCKED with the PASSWORD EXPIRED');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','MAX_STRING_EXTENDED',1,'Set it to true when max_string_size is extended');
Insert into SYS.METAXSLPARAMDESC$ (MODEL,PARAM,FLAGS,DESCRIPTION) values ('ORACLE','LOST_WRITE_PROTECTION',1,'Set it to true when database level lost write protection is enabled');
